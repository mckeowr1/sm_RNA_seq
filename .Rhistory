setwd("/Users/ryan/Documents/GitHub/sm_RNA_seq/")
library(tidyverse)
install.packages("tidyverse")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomicAlignments")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BSgenome.Dmelanogaster.UCSC.dm6")
library(GenomicAlignments)
library(BSgenome.Dmelanogaster.UCSC.dm6)
import.atac = function(file, qualthresh = 10, exclude.duplicates = FALSE)
{
# this function will import paired-end data that has been mapped and duplicate-marked. It takes as input a path to a .bamfile. It gives the option to set the map-quality score cutoff as well as whether or not to exclude duplicates. This is a more generalized and versatile version of the importer for ATAC seq reads. It does not output a graph of fragment size distributions or coverage per chromosome.
require(GenomicAlignments)
require(BSgenome.Dmelanogaster.UCSC.dm6)
dm6 = Dmelanogaster
shortname = substring(file,tail(gregexpr('[/]',file)[[1]],1)+1,nchar(file))
parent.dir = dirname(dirname(file))
#	if(!dir.exists(paste0(parent.dir,'/sample_properties'))){dir.create(paste0(parent.dir,'/sample_properties')); cat('made a new directory (sample_properties) in the parental directory.\n')}
cat(paste('Running import.atac() on',file,'\n\n'))
cat('Only importing from the canonical chromosomes, Drosophila genome version dm6. Reads only with above threshold map quality, non secondary mappings, properly paired.\n\n')
good.uns = c('chrX','chr2L','chr2R','chr3L','chr3R','chr4')
cat('importing all reads and bam file metadata\n')
if(exclude.duplicates){
cat("Duplicates will be excluded. \n")
allreads = readGAlignments(file, param = ScanBamParam(flag = scanBamFlag(isPaired = TRUE,isProperPair = TRUE,isSecondaryAlignment = FALSE, isUnmappedQuery = FALSE, isDuplicate = FALSE), what = c('flag','mrnm','mpos','mapq','isize')),use.names = TRUE)
}else{cat("Duplicates will not be excluded.\n")
allreads = readGAlignments(file, param = ScanBamParam(flag = scanBamFlag(isPaired = TRUE,isProperPair = TRUE,isSecondaryAlignment = FALSE, isUnmappedQuery = FALSE), what = c('flag','mrnm','mpos','mapq','isize')),use.names = TRUE)
}
cat('filtering out reads on non-canonical chromosomes.\n')
init = length(allreads)
allreads = allreads[seqnames(allreads)%in%good.uns]
after = length(allreads)
cat(paste('filtered', init-after, 'reads on non-canonical chromosomes.\n\n'))
cat('filtering all reads by map quality score.\n')
init = length(allreads)
allreads = allreads[mcols(allreads)$mapq >= qualthresh]
after = length(allreads)
cat(paste('filtered', init-after, 'reads with low map quality.\n\n'))
cat('reconstructing paired end reads from filtered reads.\n')
pairs = makeGAlignmentPairs(allreads,use.names = TRUE,use.mcols = c('flag','mapq'))
cat('coercing the data into a granges object.\n')
single.interval = granges(pairs)
cat('Adjusting start and end sites to reflect the original Tn5 interaction site:\n')
start(single.interval) = start(single.interval)-4
end(single.interval) = end(single.interval)+5
cat('Assigning <genome> variable as <dm6>.\n')
genome(single.interval) = 'dm6'
seqlevels(single.interval) = seqlevels(dm6)
seqinfo(single.interval) = seqinfo(dm6)
single.interval = trim(single.interval)
cat('Removing seqlevels not in use.\n')
seqlevels(single.interval) = seqlevelsInUse(single.interval)
names(single.interval) = NULL
return(single.interval)
}
import.atac("test_data/Mapped_Reads/SRR1187947_test.mapped.md.bam",
qualthresh = 10,
exclude.duplicates = FALSE)
import.single = function(file, qualthresh = 10, exclude.duplicates = FALSE)
{
# this function will import paired-end data that has been mapped and duplicate-marked. It takes as input a path to a .bamfile. It gives the option to set the map-quality score cutoff as well as whether or not to exclude duplicates. This is a more generalized and versatile version of the importer for ATAC seq reads. It does not output a graph of fragment size distributions or coverage per chromosome.
require(GenomicAlignments)
require(BSgenome.Dmelanogaster.UCSC.dm6)
dm6 = Dmelanogaster
shortname = substring(file,tail(gregexpr('[/]',file)[[1]],1)+1,nchar(file))
parent.dir = dirname(dirname(file))
#	if(!dir.exists(paste0(parent.dir,'/sample_properties'))){dir.create(paste0(parent.dir,'/sample_properties')); cat('made a new directory (sample_properties) in the parental directory.\n')}
cat(paste('Running import.single() on',file,'\n\n'))
cat('Only importing from the canonical chromosomes, Drosophila genome version dm6. Reads only with above threshold map quality, non secondary mappings.\n\n')
good.uns = c('chrX','chr2L','chr2R','chr3L','chr3R','chr4')
cat('importing all reads and bam file metadata\n')
if(exclude.duplicates){
cat("Duplicates will be excluded. \n")
allreads = readGAlignments(file,
param = ScanBamParam(flag = scanBamFlag(isSecondaryAlignment = FALSE, isUnmappedQuery = FALSE, isDuplicate = FALSE),
what = c('flag','mrnm','mpos','mapq','isize')),
use.names = FALSE)
}else{cat("Duplicates will not be excluded.\n")
allreads = readGAlignments(file,
param = ScanBamParam(flag = scanBamFlag(isSecondaryAlignment = FALSE, isUnmappedQuery = FALSE),
what = c('flag','mrnm','mpos','mapq','isize')),
use.names = FALSE)
}
cat('filtering out reads on non-canonical chromosomes.\n')
init = length(allreads)
allreads = allreads[seqnames(allreads) %in% good.uns]
after = length(allreads)
cat(paste('filtered', init-after, 'reads on non-canonical chromosomes.\n\n'))
cat('filtering all reads by map quality score.\n')
init = length(allreads)
allreads = allreads[mcols(allreads)$mapq >= qualthresh]
after = length(allreads)
cat(paste('filtered', init-after, 'reads with low map quality.\n\n'))
#cat('reconstructing paired end reads from filtered reads.\n')
#pairs = makeGAlignmentPairs(allreads,use.names = TRUE,use.mcols = c('flag','mapq'))
cat('coercing the data into a granges object.\n')
single.interval = granges(allreads)
cat('Assigning <genome> variable as <dm6>.\n')
genome(single.interval) = 'dm6'
seqlevels(single.interval) = seqlevels(dm6)
seqinfo(single.interval) = seqinfo(dm6)
single.interval = trim(single.interval)
cat('Removing seqlevels not in use.\n')
seqlevels(single.interval) = seqlevelsInUse(single.interval)
names(single.interval) = NULL
return(single.interval)
}
#Read in the BAM to a gRanges Object
import.single("test_data/Mapped_Reads/SRR1187947_test.mapped.md.bam",
qualthresh = 10,
exclude.duplicates = FALSE)
#Read in the BAM to a gRanges Object
import.single("SRR1187947/Mapped_Reads/SRR1187947_trimmed.fq.gz.mapped.md.bam",
qualthresh = 10,
exclude.duplicates = FALSE)
#Read in the BAM to a gRanges Object
obj <- import.single("SRR1187947/Mapped_Reads/SRR1187947_trimmed.fq.gz.mapped.md.bam",
qualthresh = 10,
exclude.duplicates = FALSE)
View(obj)
str(obj)
head(obj)
tail(obj)
View(obj)
obj[[elementMetadata]]
obj[elementMetadata]
obj[[4]]
length(obj)
head(qwidth(obj))
qwidth(obj)
#Read in the BAM to a gRanges Object
obj <- import.single("SRR1187947/Mapped_Reads/SRR1187947_trimmed.fq.gz.mapped.md.bam",
qualthresh = 10,
exclude.duplicates = FALSE)
#Read in the BAM to a gRanges Object
obj <- import.single("SRR1187947/Mapped_Reads/SRR1187947_trimmed.fq.gz.mapped.md.bam",
qualthresh = 10,
exclude.duplicates = FALSE)
head(seqnames(obj))
head(qwidth(obj))
head(seqlengths(obj))
show(obj)
width(obj)
hist(width(obj))
bins = tileGenome(seqlengths(Dmelanogaster), tilewidth = 10, cut.last.tile.in.chrom = TRUE)
bins = bins[seqnames(bins) %in% paste0('chr', c('2L','2R','3L','3R','4','X'))] # this can be commented out if you want to keep all chromosomes/contigs.
bins = bins[width(bins) == 10]
seqlevels(bins) = seqlevelsInUse(bins)
genome(bins) = 'dm6'
cover = coverage(obj)
#Count
ba = binnedAverage(bins = bins, numvar = cover, varname = 'score')
View(ba)
show(ba)
values(ba)
unique(values(ba))
#Lets Plot Some Coverage
values(ba) #Acess the Score Column of the Coverage
library(tidyverse)
#Lets Plot Some Coverage
values(ba) %>%   #Acess the Score Column of the Coverage
as.data.frame()
#Lets Plot Some Coverage
test <- values(ba) %>%   #Acess the Score Column of the Coverage
as.data.frame() #%>%
View(test)
detach("package:tidyverse", unload=TRUE)
detach("library:tidyverse", unload=TRUE)
#Lets Plot Some Coverage
hist(values(ba))#Acess the Score Column of the Coverage
#Lets Plot Some Coverage
values(ba) %>%  #Acess the Score Column of the Coverage
as.data.frame() %>%
rownames_to_column()
#Lets Plot Some Coverage
values(ba) %>%  #Acess the Score Column of the Coverage
as.data.frame() %>%
rownames_to_column() %>%
ggplot(aes(x = rowname, y=score)) +
geom_histogram()
#Lets Plot Some Coverage
values(ba) %>%  #Acess the Score Column of the Coverage
as.data.frame() %>%
rownames_to_column() %>%
ggplot(aes(x = rowname, y=score)) +
geom_line()
#Lets Plot Some Coverage
values(ba) %>%#Acess the Score Column of the Coverage
as.data.frame() %>%
rownames_to_column() %>%
sample_n(1000)
#Lets Plot Some Coverage
values(ba) %>%#Acess the Score Column of the Coverage
as.data.frame() %>%
rownames_to_column() %>%
sample_n(1000) %>%
ggplot(aes(x = rowname, y=score)) +
geom_line()
#Lets Plot Some Coverage
values(ba) %>%#Acess the Score Column of the Coverage
as.data.frame() %>%
rownames_to_column() %>%
sample_n(1000) %>%
ggplot(aes(x = rowname, y=score)) +
geom_point()
#Lets Plot Some Coverage
values(ba) %>%#Acess the Score Column of the Coverage
as.data.frame() %>%
rownames_to_column() %>%
sample_n(1000) %>%
ggplot(aes(score)) +
geom_histogram()
#Lets Plot Some Coverage
values(ba) %>%#Acess the Score Column of the Coverage
as.data.frame() %>%
rownames_to_column() %>%
sample_n(1000) %>%
ggplot() +
geom_histogram(aes(score))
#Lets Plot Some Coverage
values(ba) %>%#Acess the Score Column of the Coverage
as.data.frame() %>%
rownames_to_column() %>%
sample_n(1000) %>%
ggplot() +
geom_line(aes(x = rowname, y =score))
#Lets Plot Some Coverage
values(ba) %>%#Acess the Score Column of the Coverage
as.data.frame() %>%
rownames_to_column() %>%
sample_n(10000) %>%
ggplot() +
geom_line(aes(x = rowname, y =score))
#Lets Plot Some Coverage
values(ba) %>%#Acess the Score Column of the Coverage
as.data.frame() %>%
rownames_to_column() %>%
#sample_n(10000) %>%
ggplot() +
geom_line(aes(x = rowname, y =score))
wiggler = function(coverage.data, file, name = "short name", description = "description", color = 'forestgreen', smoothing = 2, y.axis.range = c(0,20), height = 50)
{
# this function will take coverage data, like that produced by `basecount()` and turn it into a viewable track for display on the UCSC genome browser. Necessary input is the coverage data (make sure that all widths are equal), and the output filepath. Tracklines will be generated with default values unless they are overwritten.
require(rtracklayer)
trackline = new('GraphTrackLine',
name = name,
description = description,
alwaysZero = TRUE,
type = 'wig',
color = col2rgb(color)[,1],
smoothingWindow = smoothing,
windowingFunction = 'mean',
viewLimits = y.axis.range,
graphType = 'bar',
autoScale = FALSE,
visibility = 'full',
maxHeightPixels = as(c(10, height, 100), 'integer')
)
write(x = as(trackline, "character"), file = file)
export(object = coverage.data, con = file, format = 'wig', append = TRUE)
}
wiggler(ba, "SRR1187947")
wiggler(ba, SRR1187947)
wiggler(ba, "~/Documents")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rtracklayer")
wiggler(ba, "./Documents")
wiggler(ba, "/Users/ryan/Documents/GitHub/sm_RNA_seq/SRR1187947.wig")
hist(width(obj))
#Read in the BAM to a gRanges Object
obj <- import.single("SRR1187947/Mapped_Reads/SRR1187947_trimmed.fq.gz.mapped.md.bam",
qualthresh = 1,
exclude.duplicates = FALSE)
View(obj)
countBam("SRR1187947/Mapped_Reads/SRR1187947_trimmed.fq.gz.mapped.md.bam") %>%
.$records
ba[which.max(score(ba))]
