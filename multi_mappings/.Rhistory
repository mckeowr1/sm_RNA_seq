library(data.table)
library(tidyverse)
setwd("/Users/ryan/Documents/GitHub/sm_RNA_seq/multi_mappings/")
index <- data.table::fread("files/SRR1187947_mapped_verysensitive_local.mapped.bedindex.tsv")
read_names <- readLines("small_readnames.txt")
read_names <- readLines("files/small_readnames.txt")
head(index)
index %>%
dplyr::filter(V4 == read_names[1])
index %>%
dplyr::filter(V4 == read_names[2])
test <- index %>%
dplyr::filter(V4 == read_names[2])
test[1,1]
test[,2]
str(test[,2])
as.character(test[,2])
as.character(test[,2]) %>%
str_split(sep = ",")
as.character(test[,2]) %>%
str_split(pattern = ",")
check <- as.character(test[,2]) %>%
str_split(pattern = ",")
View(check)
check <- as.character(test[,2]) %>%
as.character(str_split(pattern = ","))
check <- as.character(test[,2]) %>%
str_split(pattern = ",") %>%
as.character()
check <- as.character(test[,2]) %>%
str_split(pattern = ",")
View(check)
check <- as.character(test[,2]) %>%
str_split(pattern = ",") %>%
.[[1]]
writeLines(check)
writeLines(check, "test_lines.txt")
get_bed_location(index, read_names[1])
#Function to Search through a Bed Index and Pull out line loactions
get_bed_location <- function(bedindex,
readname)
{
## At some point want to figure out how to run this for multiple reads##
# #Read in read names to character vector
# read_names <- readLines(read_name )
read <- bedindex %>% dplyr::filter(V4 == readname)
lines <- as.character(read[,2]) %>%
str_split(pattern = ",") %>%  #For some reason this converts to a list
.[[1]] #Make it not a list
writeLines(lines, glue::glue("{readname}_lines.txt"))
}
get_bed_location(index, read_names[1])
for(read in read_names){
get_bed_location(index, read)
}
View(test)
lines <- as.character(test[,2]) %>%
str_split(pattern = ",") %>%  #For some reason this converts to a list
.[[1]] %>% #Make it not a list
as.numeric() %>%
sort()
#Function to Search through a Bed Index and Pull out line loactions
get_bed_location <- function(bedindex,
readname)
{
## At some point want to figure out how to run this for multiple reads##
# #Read in read names to character vector
# read_names <- readLines(read_name )
read <- bedindex %>% dplyr::filter(V4 == readname)
lines <- as.character(read[,2]) %>%
str_split(pattern = ",") %>%  #For some reason this converts to a list
.[[1]] %>% #Make it not a list
as.numeric()
sort()
writeLines(lines, glue::glue("{readname}_lines.txt"))
}
for(read in read_names){
get_bed_location(index, read)
}
for(read in read_names){
get_bed_location(index, read)
}
#Function to Search through a Bed Index and Pull out line loactions
get_bed_location <- function(bedindex,
readname)
{
## At some point want to figure out how to run this for multiple reads##
# #Read in read names to character vector
# read_names <- readLines(read_name )
read <- bedindex %>% dplyr::filter(V4 == readname)
lines <- as.character(read[,2]) %>%
str_split(pattern = ",") %>%  #For some reason this converts to a list
.[[1]] %>% #Make it not a list
as.numeric() %>%
sort()
writeLines(lines, glue::glue("{readname}_lines.txt"))
}
for(read in read_names){
get_bed_location(index, read)
}
vec <- c("158", "157")
sort(vec)
#Function to Search through a Bed Index and Pull out line loactions
get_bed_location <- function(bedindex,
readname)
{
## At some point want to figure out how to run this for multiple reads##
# #Read in read names to character vector
# read_names <- readLines(read_name )
read <- bedindex %>% dplyr::filter(V4 == readname)
lines <- as.character(read[,2]) %>%
str_split(pattern = ",") %>%  #For some reason this converts to a list
.[[1]] %>% #Make it not a list
sort()
writeLines(lines, glue::glue("{readname}_lines.txt"))
}
for(read in read_names){
get_bed_location(index, read)
}
library(genomeation)
install.packages("genomeation")
library(genomation)
library(genomeation)
library("genomeation")
install.packages("genomation")
install.packages("genomation")
library(devtools)
install_github('davetang/bedr')
install.packages("devtools")
install_github('davetang/bedr')
library(devtools )
library(devtools)
install_github('davetang/bedr')
bed_to_granges()
library(bedr)
bed_to_granges()
bed_to_granges("42AB_Lines/SRR1187947.102_lines.txt.bed")
bed_to_granges("42AB_Lines/SRR1187947.57_lines.txt.bed")
z <- matrix(0, length(bins), 1) #Define the matrix length length of binned genomes
bins = tileGenome(seqlengths(Dmelanogaster), tilewidth = 100, cut.last.tile.in.chrom = TRUE)
bins = bins[seqnames(bins) %in% paste0('chr', c('2L','2R','3L','3R','4','X'))] # this can be commented out if you want to keep all chromosomes/contigs.
bins = bins[width(bins) == 100]
dm6 = Dmelanogaster
require(BSgenome.Dmelanogaster.UCSC.dm6)
require(GenomicAlignments)
bed <- bed_to_granges("42AB_Lines/SRR1187947.57_lines.txt.bed")
z <- matrix(0, length(bins), 1) #Define the matrix length length of binned genomes
z[subjectHits(findOverlaps(bed, bins)),1] <- 1 #set the matrix value based
bins = tileGenome(seqlengths(Dmelanogaster), tilewidth = 100, cut.last.tile.in.chrom = TRUE)
bins = bins[seqnames(bins) %in% paste0('chr', c('2L','2R','3L','3R','4','X'))] # this can be commented out if you want to keep all chromosomes/contigs.
bins = bins[width(bins) == 100]
z <- matrix(0, length(bins), 1) #Define the matrix length length of binned genomes
z[subjectHits(findOverlaps(bed, bins)),1] <- 1 #set the matrix value based
colnames(z) <- paste0("gr.", 1)
mcols(bins) <- z
show(bins)
View(z)
#Apply to a mat
z <- matrix(0, length(bins), 1) #Define the matrix length length of binned genomes
z[subjectHits(findOverlaps(bed, bins)),1] <- 1 #set the matrix value based
colnames(z) <- paste0("gr.", 1)
View(z)
as.logical(countOverlaps(bed, bins))
test <- as.logical(countOverlaps(bed, bins))
test <- as.logical(countOverlaps( bins, bed))
view(test)
View(test)
test <- (countOverlaps( bins, bed)
test <- countOverlaps( bins, bed)
test <- countOverlaps( bins, bed)
View(test)
files <- ls("42AB_Lines/*.bed")
files <- list.files("42AB_Lines/*.bed")
files <- list.files("42AB_Lines/*.bed")
files <- list.files("42AB_Lines")
files <- list.files("42AB_Lines", pattern ="*.bed")
files <- list.files("42AB_Lines", pattern ="*.bed", full.names = T)
GRangesList(lapply(
files,
function(x) {
a = bed_to_granges(x)
b = countOverlaps(bins, a)
return(b)
}
))
print(files)
bed_to_granges(file[1])
bed_to_granges(files[1])
bed_to_granges(files[2])
A <- bed_to_granges(files[2])
a <- bed_to_granges(files[2])
b = countOverlaps(bins, a)
test_ranges <- GRangesList(lapply(
files,
function(x) {
a = bed_to_granges(x)
b = countOverlaps(bins, a)
return(b)
}
))
test_ranges <- GRangesList(lapply(
files,
function(x) {
a = bed_to_granges(x)
b = countOverlaps(bins, a)
}
))
test_ranges <- (lapply(
test_ranges <- lapply(
files,
function(x) {
a = bed_to_granges(x)
b = countOverlaps(bins, a)
return()
}
)
test_ranges <- lapply(
files,
function(x) {
a = bed_to_granges(x)
b = countOverlaps(bins, a)
return()
}
)
test_ranges <- lapply(
files,
function(x) {
a = bed_to_granges(x)
b = countOverlaps(bins, a)
return()
}
)
View(test_ranges)
test_ranges[[1]]
test_ranges <- lapply(
files,
function(x) {
a = bed_to_granges(x)
b = countOverlaps(bins, a)
return(b)
}
)
test_ranges[[1]]
test_matrix = do.call("cbind", test_ranges)
View(test_matrix)
test_matrix[[1]]
head(which(test_matrix[,1] == 1))
head(which(test_matrix[,2] == 1))
image(test_matrix[100000:300000,])
