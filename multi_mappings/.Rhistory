setwd("/Users/ryan/Documents/GitHub/sm_RNA_seq/multi_mappings/")
require(GenomicAlignments)
require(BSgenome.Dmelanogaster.UCSC.dm6)
dm6 = Dmelanogaster
parent.dir = dirname(dirname(file))
good.uns = c('chrX','chr2L','chr2R','chr3L','chr3R','chr4')
allreads = readGAlignments("SRR1187947.57.bam",
param = ScanBamParam(flag = scanBamFlag(isSecondaryAlignment = TRUE, isUnmappedQuery = FALSE),
what = c('flag','mpos','mapq','isize')),
use.names = TRUE)
show(allreads)
init = length(allreads)
allreads = allreads[seqnames(allreads) %in% good.uns]
after = length(allreads)
cat('coercing the data into a granges object.\n')
single.interval = granges(allreads)
show (single.interval)
genome(single.interval) = 'dm6'
show (single.interval)
show (single.interval)
allreads = readGAlignments("SRR1187947.57.bam",
param = ScanBamParam(flag = scanBamFlag(isSecondaryAlignment = TRUE, isUnmappedQuery = FALSE),
what = c('flag','mpos','mapq','isize')),
use.names = TRUE)
single.interval = granges(allreads)
reference = granges('dm6')
multi_reads = granges(allreads)
multi_reads$seqnames
multi_reads[seqnames]
multi_reads@seqnames
multi_reads = granges(allreads)
allreads = readGAlignments("SRR1187947.57.bam",
param = ScanBamParam(flag = scanBamFlag(isSecondaryAlignment = TRUE, isUnmappedQuery = FALSE),
what = c('flag','mpos','mapq','isize')),
use.names = TRUE)
multi_reads = granges(allreads)
multi_reads@seqnames
names <- multi_reads$seqnames
names <- multi_reads@seqnames
View(names)
allreads = readGAlignments("SRR1187947.57.bam",
param = ScanBamParam(flag = scanBamFlag(isSecondaryAlignment = TRUE, isUnmappedQuery = FALSE),
what = c('flag','mpos','mapq','isize')),
use.names = TRUE)
names <- multi_reads@names
names <- multi_reads@NAMES
names <- multi_reads@ NAMES
multi_reads = granges(allreads)
names <- multi_reads@NAMES
names(multi_reads)
read_names <- names(multi_reads)
read_names <- unique(names(multi_reads))
table(names(multi_reads)$ranges(multi_reads))
table(names(multi_reads), ranges(multi_reads))
table(names(multi_reads)$ranges(multi_reads))
ranges <- ranges(multi_reads)
table(read_names$ranges)
print(ranges)
show(multi_reads)
show(dm6)
dm6
ref <- dm6
union(multi_reads,dm6)
union(multi_reads , dm6)
View(multi_reads)
granges(dm6)
granges(dm6)
bins = tileGenome(seqlengths(Dmelanogaster), tilewidth = 10, cut.last.tile.in.chrom = TRUE)
show(bins)
union(bins, multi_reads)
test <- union(bins, multi_reads)
names(test)
test <- union(bins, multi_reads)
names(test)
show(test)
bins = tileGenome(seqlengths(Dmelanogaster), tilewidth = 10, cut.last.tile.in.chrom = TRUE)
test <- union(bins, multi_reads)
names(test)
ranges(test)
names(test)
test <- union(multi_reads, bin)
test <- union(multi_reads, bins)
names(test)
test <- union(bins, multi_reads)
test <- intersect(bins, multi_reads)
names(test)
show(test)
test <- union(bins, multi_reads)
show(test)
show(bins)
seqnames(test)
ranges(test)
bins = bins[seqnames(bins) %in% paste0('chr', c('2L','2R','3L','3R','4','X'))] # this can be commented out if you want to keep all chromosomes/contigs.
bins = bins[width(bins) == 10]
test <- union(bins, multi_reads)
ranges(test)
show(test)
bins = tileGenome(seqlengths(Dmelanogaster), tilewidth = 10, cut.last.tile.in.chrom = TRUE)
bins = bins[seqnames(bins) %in% paste0('chr', c('2L','2R','3L','3R','4','X'))] # this can be commented out if you want to keep all chromosomes/contigs.
bins = bins[width(bins) == 10]
test <- union(bins, multi_reads)
View(test)
granges(test)
genome(multi_reads) = 'dm6'
test <- union(bins, multi_reads)
ranges(test)
granges(test)
test <- intersect(bins, multi_reads)
show(test)
bins = tileGenome(seqlengths(Dmelanogaster), tilewidth = 1000, cut.last.tile.in.chrom = TRUE)
bins = bins[seqnames(bins) %in% paste0('chr', c('2L','2R','3L','3R','4','X'))] # this can be commented out if you want to keep all chromosomes/contigs.
bins = bins[width(bins) == 1000]
test <- intersect(bins, multi_reads)
ranges(test)
test <- union(bins, multi_reads)
ranges(test)
findOverlaps(multi_reads, bins)
tet2<- findOverlaps(multi_reads, bins)
test2<- findOverlaps(multi_reads, bins)
View(tet2)
test2<- findOverlaps(multi_reads, bins)
View(tet2)
show(multi_reads)
genome(multi_reads) = 'dm6'
show(bins)
bins = tileGenome(seqlengths(Dmelanogaster), tilewidth = 100, cut.last.tile.in.chrom = TRUE)
bins = bins[seqnames(bins) %in% paste0('chr', c('2L','2R','3L','3R','4','X'))] # this can be commented out if you want to keep all chromosomes/contigs.
bins = bins[width(bins) == 100]
show(bins)
z <- matrix(0, length(bins), 1)
print(z)
z[subjectHits(findOverlaps(multi_reads, bins)),1] <- 1
print(x)
print(z)
colnames(z) <- paste0("gr.", 1)
View(z)
mcols(bins) <- z
show(bins)
bins[887551]
ranges(multi_reads)
granges(multi_reads)
bins[849578]
granges(multi_reads)
